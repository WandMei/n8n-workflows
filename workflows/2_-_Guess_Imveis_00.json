{"createdAt":"2025-07-22T13:01:56.391Z","updatedAt":"2025-07-22T18:19:42.623Z","id":"tkce7RgHgPYRnu4A","name":"2 - Guess Imóveis 00","active":false,"isArchived":false,"nodes":[{"parameters":{"amount":4},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[-260,-100],"id":"a9795c3e-95ce-477c-bd8a-edc1182d1de6","name":"Wait3","webhookId":"65ff8064-0a3a-4195-bf63-5cc130c8fe48","disabled":true,"notes":"TEMPLATE DESENVOLVIDO POR NOCODE STARTUP\nhttps://nocodestartup.io/\n\nFORMAÇÃO GESTOR DE AGENTES DE IA:\nhttps://nocodestartup.io/formacao-gestor-agentes-ia/"},{"parameters":{"modelName":"models/gemini-2.5-pro-preview-05-06","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatGoogleGemini","typeVersion":1,"position":[-820,-80],"id":"6cbb54d6-d203-45f1-ab3c-b29bbe305af6","name":"Gemini","credentials":{"googlePalmApi":{"id":"NS3lWtAwJAoj2SGy","name":"Google Gemini(PaLM) Api account Wanderson Gemini API"}},"disabled":true},{"parameters":{"toolDescription":"Envia uma mensagem de reação como resposta a uma mensagem do usuário. Reação é sempre um emoji.","method":"POST","url":"={{ $('Dados iniciais').item.json.url_chatwoot }}/api/v1/accounts/{{ $('Dados iniciais').item.json.id_conta }}/conversations/{{ $('Dados iniciais').item.json.id_conversa }}/messages","authentication":"predefinedCredentialType","nodeCredentialType":"chatwootApi","sendBody":true,"parametersBody":{"values":[{"name":"content_attributes","valueProvider":"fieldValue","value":"={ \"in_reply_to\": {{ $('Dados iniciais').item.json.id_mensagem }}, \"is_reaction\": true }"},{"name":"content"}]}},"type":"@n8n/n8n-nodes-langchain.toolHttpRequest","typeVersion":1.1,"position":[-700,-80],"id":"4764d3e7-3fba-4baf-bee5-d68bb84d702a","name":"Reagir mensagem","credentials":{"chatwootApi":{"id":"zT1Bg0imC8LCHEgH","name":"ChatWoot account"}},"disabled":true},{"parameters":{"toolDescription":"Pesquisa de endereço pelo via CEP","url":"https://viacep.com.br/ws/01001000/json/","options":{}},"type":"n8n-nodes-base.httpRequestTool","typeVersion":4.2,"position":[-580,-80],"id":"b390cab9-e8fe-4a25-bd85-1f2913778a4a","name":"Pesquisa CEP","disabled":true},{"parameters":{"options":{}},"type":"@n8n/n8n-nodes-langchain.toolSerpApi","typeVersion":1,"position":[-460,-80],"id":"bc2a3c57-b2d9-4dc4-85f1-6bc7331c9a03","name":"SerpAPI","credentials":{"serpApi":{"id":"d2vbBV24YkO687AI","name":"SerpAPI Wanderson"}},"disabled":true},{"parameters":{"method":"POST","url":"={{ $('Dados iniciais').item.json.url_chatwoot }}/api/v1/accounts/{{ $('Dados iniciais').item.json.id_conta }}/conversations/{{ $('Dados iniciais').item.json.id_conversa }}/messages","authentication":"predefinedCredentialType","nodeCredentialType":"chatwootApi","sendBody":true,"bodyParameters":{"parameters":[{"name":"content","value":"={{ $json['output.mensagens'] }}"},{"name":"number","value":"={{ $('Dados iniciais').item.json.id_conversa }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-40,-100],"id":"53962c60-2c86-4f8e-9539-ef52c3651064","name":"Enviar texto Chatwoot1","alwaysOutputData":true,"credentials":{"chatwootApi":{"id":"zT1Bg0imC8LCHEgH","name":"ChatWoot account"}},"disabled":true},{"parameters":{"jsCode":"const items = [];\n\n// 1. Obter e formatar o número do WhatsApp do nó 'Info'\nlet whatsappNumberFormatted = '';\ntry {\n    const rawNumber = $('Dados iniciais').first().json.telefone;\n    whatsappNumberFormatted = rawNumber.replace(/[\\+\\/\\-\\(\\)\\s]/g, '') + '@s.whatsapp.net';\n    console.log(\"WhatsApp Number Formatted:\", whatsappNumberFormatted); // DEBUG\n} catch (e) {\n    console.warn(\"Could not retrieve and format WhatsApp number from 'Info' node:\", e);\n    whatsappNumberFormatted = \"5500000000000@s.whatsapp.net\"; // Fallback\n}\n\n// 2. TRATAMENTO ROBUSTO DA ENTRADA (MANTIDO)\nlet inputData = [];\nif (Array.isArray($input.json)) {\n    inputData = $input.json;\n} else if (typeof $input.json === 'object' && $input.json !== null) {\n    inputData = [$input.json];\n} else {\n    console.warn(\"Unexpected input format for $input.json. Not an array or object.\");\n}\n\nconsole.log(\"Number of input items (after robust treatment):\", inputData.length); // DEBUG\n\n// 3. Iterar sobre os itens de entrada tratados\nfor (const inputItem of inputData) {\n    console.log(\"Processing input item:\", JSON.stringify(inputItem)); // DEBUG: Mostra o item completo\n    \n    // Acessa a URL do campo específico 'output.mensagens'\n    const imageUrl = inputItem['output.mensagens']; \n    console.log(\"Extracted imageUrl:\", imageUrl); // DEBUG: Mostra a URL extraída\n\n    // 4. Verifica se a URL foi obtida e é uma string válida\n    if (typeof imageUrl === 'string' && imageUrl.length > 0) {\n        const fileExtension = imageUrl.split('.').pop().toLowerCase();\n        let mediaType = 'image'; \n        let mimeType = `image/${fileExtension === 'jpg' ? 'jpeg' : fileExtension}`;\n\n        const fileName = imageUrl.split('/').pop();\n        console.log(\"Inferred MimeType:\", mimeType); // DEBUG\n        console.log(\"Inferred FileName:\", fileName); // DEBUG\n\n        // 5. Prepara o JSON para o sendMedia da Evolution API\n        const outputJson = {\n            number: whatsappNumberFormatted,\n            mediaType: mediaType,\n            mimeType: mimeType,\n            caption: \"\",\n            media: imageUrl,\n            fileName: fileName\n        };\n\n        console.log(\"Generated outputJson:\", JSON.stringify(outputJson)); // DEBUG: Mostra o JSON final\n        items.push({ json: outputJson });\n    } else {\n        console.warn(\"Input item did not contain a valid 'output.mensagens' URL. Skipping this item.\", inputItem); // Mensagem melhorada\n    }\n}\n\nreturn items;"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[160,-100],"id":"10402425-2a96-4ef5-94ef-780f0d523169","name":"Code URL","alwaysOutputData":true,"disabled":true},{"parameters":{"method":"POST","url":"={{ $('When Executed by Another Workflow').item.json.url_chatwoot }}/api/v1/accounts/{{ $('When Executed by Another Workflow').item.json.id_conta }}/conversations/{{ $('When Executed by Another Workflow').item.json.id_conversa }}/messages","authentication":"predefinedCredentialType","nodeCredentialType":"chatwootApi","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"multipart/form-data"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"content","value":"={{ $json.output }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[180,220],"id":"ee33f42d-1fdb-4c48-be9a-cf8e0408fa0b","name":"Enviar mensagem","credentials":{"chatwootApi":{"id":"zT1Bg0imC8LCHEgH","name":"ChatWoot account"}},"disabled":true,"onError":"continueRegularOutput"},{"parameters":{"url":"={{ $json.principal }}","options":{"response":{"response":{"responseFormat":"file"}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-40,60],"id":"ccbd1d51-0123-4fae-95bc-08ebd95f1188","name":"Download Imagens","alwaysOutputData":true,"disabled":true},{"parameters":{"assignments":{"assignments":[{"id":"b77ec3d1-43ae-48d6-b521-a8ae83c19280","name":"id_conta","value":"={{ $('When Executed by Another Workflow').item.json.id_conta }}","type":"string"},{"id":"258a891d-e65c-4781-8014-6fad7b1b805a","name":"id_conversa","value":"={{ $('When Executed by Another Workflow').item.json.id_conversa }}","type":"string"},{"id":"539cac84-adf0-4af1-b27c-2febc56de033","name":"url_chatwoot","value":"={{ $('When Executed by Another Workflow').item.json.url_chatwoot }}","type":"string"}]},"includeOtherFields":true,"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-260,220],"id":"76705ac3-eabd-49a5-b3ff-b4d25f0f8988","name":"Edit Fields","alwaysOutputData":true,"disabled":true},{"parameters":{"jsCode":"const inputItem = items[0].json;\nconst outputText = inputItem.output; // Saída do AI Agent que pode conter markdown\n\n// Captura os componentes da URL do Chatwoot do inputItem\nconst chatwootBaseUrl = inputItem.url_chatwoot;\nconst accountId = inputItem.id_conta;\nconst conversationId = inputItem.id_conversa;\n\n// Constrói a conversation_url completa\nlet conversationUrl = '';\nif (chatwootBaseUrl && accountId && conversationId) {\n    conversationUrl = `${chatwootBaseUrl}/api/v1/accounts/${accountId}/conversations/${conversationId}`;\n} else {\n    console.error(\"Dados de URL do Chatwoot faltando no inputItem:\", inputItem);\n}\n\n// Regex para extrair as URLs das imagens (para o Download Imagens)\nconst imageUrlRegex = /!\\[.*?\\]\\((https?:\\/\\/[^\\s)]+\\.(?:jpg|jpeg|png|gif|webp))\\)/g;\nlet match;\nconst imageUrls = [];\n\nwhile ((match = imageUrlRegex.exec(outputText)) !== null) {\n    imageUrls.push(match[1]);\n}\n\n// **AJUSTE CRÍTICO AQUI (para o texto ficar 100% limpo):**\nlet cleanedText = outputText\n    .replace(/!\\[.*?\\]\\((https?:\\/\\/[^\\s)]+\\.(?:jpg|jpeg|png|gif|webp))\\)\\s*/g, '') // Remove o markdown e espaços/quebras de linha após\n    .replace(/^- \\*\\*Fotos:\\*\\*(\\s*)$/gm, '') // Remove a linha \"- **Fotos:**\" e seus espaços ao final da linha\n    .replace(/^\\s*\\n/gm, '') // Remove linhas vazias que sobraram\n    .replace(/(\\n\\s*){2,}/g, '\\n\\n'); // Reduz múltiplas quebras de linha para no máximo duas\n\n// NOVO PASSO: Limpa espaços em branco no início e fim de CADA LINHA e reconstrói o texto.\ncleanedText = cleanedText.split('\\n').map(line => line.trim()).filter(line => line.length > 0).join('\\n');\n\n\nconst outputItems = imageUrls.map(url => ({\n    json: {\n        principal: url, // URL da imagem para download\n        cleanedContent: cleanedText, // **TEXTO AGORA REALMENTE LIMPO**\n        conversation_url: conversationUrl // URL da conversa\n    }\n}));\n\n// Se não houver URLs de imagem, ainda retorna o texto limpo e a conversation_url em um único item\nif (outputItems.length === 0) {\n    return [{\n        json: {\n            cleanedContent: cleanedText, // **TEXTO AGORA REALMENTE LIMPO**\n            conversation_url: conversationUrl\n        }\n    }];\n}\n\nreturn outputItems;"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-260,60],"id":"b6fb0fe7-f9bd-4d2d-a6ac-d89531d97a27","name":"Extrair imagens","alwaysOutputData":true,"disabled":true},{"parameters":{"jsCode":"// Assumimos que os itens de entrada vêm do \"Download Imagens\",\n// onde cada item tem:\n//   item.json (com principal, cleanedContent, conversation_url)\n//   item.binary (que é um objeto como { mimeType: \"...\", fileName: \"...\", data: \"...\" })\n\nconst firstInputItem = items[0];\nconst cleanedContent = firstInputItem.json.cleanedContent;\nconst conversationUrl = firstInputItem.json.conversation_url;\n\nconst outputItems = [];\n\n// 1. Adicione um item para o conteúdo da mensagem (texto)\noutputItems.push({\n    json: {\n        content: cleanedContent,\n        conversation_url: conversationUrl\n    }\n});\n\n// 2. Para cada imagem, crie um item separado com seus dados binários\nfor (let i = 0; i < items.length; i++) {\n    const item = items[i];\n\n    // Apenas para depuração - você pode remover esses console.log depois que funcionar\n    console.log(`--- Processando Item de Entrada ${i} ---`);\n    console.log(`item.binary existe? ${!!item.binary}`);\n    if (item.binary) {\n        console.log(`item.binary.data existe? ${!!item.binary.data}`);\n        console.log(`item.binary.mimeType: ${item.binary.mimeType}`);\n        console.log(`item.binary.fileName: ${item.binary.fileName}`);\n    }\n\n    // A condição verifica se o objeto binary existe e se ele tem a propriedade 'data'\n    if (item.binary && item.binary.data) {\n        outputItems.push({\n            json: {\n                // Estes campos ainda são úteis no .json para metadados,\n                // mas o nó HTTP Request usará principalmente os metadados do próprio objeto binary\n                file_name: item.json.principal ? item.json.principal.split('/').pop() : `image_${i+1}.jpg`,\n                content_type: item.binary.mimeType || \"application/octet-stream\"\n            },\n            // *** MUDANÇA ESSENCIAL AQUI: PASSE O OBJETO BINARY COMPLETO! ***\n            binary: item.binary\n        });\n    } else {\n        console.warn(`AVISO: Item ${i} não possui dados binários completos ou esperados em item.binary.data. Item JSON: ${JSON.stringify(item.json)}`);\n    }\n}\n\nreturn outputItems;"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-40,220],"id":"2fe1e5fb-0567-490b-9a1e-c2768ba685e8","name":"Montar Payload","disabled":true}],"connections":{"Extrair imagens":{"main":[[{"node":"Download Imagens","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"f270dbd4-5882-40d1-af93-5e11f66ef855","triggerCount":0,"tags":[]}
